//
//  MessagesViewController.swift
//  iMassageSticker MessagesExtension
//
//  Created by Mehedi on 11/8/21.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, MSStickerBrowserViewDataSource {
    
   
    @IBOutlet weak var collectionView: UICollectionView!
    var stickers = [MSSticker]();
    var url = ["http://iconizer.net/files/Brightmix/orig/monotone_close_exit_delete_small.png","https://upload.wikimedia.org/wikipedia/commons/d/d5/Japan_small_icon.png"];

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.

        print(" ----- HERE");

        loadStickers();
        createStickerBrowser()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // MARK: - Stickers Handling

    func loadStickers(){

       createSticker(asset: "1", localizedDescription:"grinning face")
       createSticker(asset: "2", localizedDescription:"grimacing face")
       createSticker(asset: "3", localizedDescription:"grinning face with smiling eyes")
       createSticker(asset: "4", localizedDescription:"face with tears of joy")
       createSticker(asset: "5", localizedDescription:"smiling face with open mouth")
       createSticker(asset: "6", localizedDescription:"smiling face with open mouth and smiling eyes")

     }

     func createSticker(asset: String, localizedDescription: String){

       // we use URL so, it's possible to use image from network
         let stickerURL = Bundle.main.url(forResource: asset, withExtension: "png")!

       let sticker: MSSticker
       do {

         try sticker = MSSticker(contentsOfFileURL: stickerURL, localizedDescription: localizedDescription)
         // localizedDescription for accessibility

         stickers.append(sticker)
       }catch {
         print(error)
         return
       }

     }
    
    func createStickerBrowser() {

        print(" ----- createStickerBrowser");

        let controller = MSStickerBrowserViewController(stickerSize: .large)

        addChild(controller)
        view.addSubview(controller.view)

        controller.stickerBrowserView.backgroundColor = UIColor.gray
        controller.stickerBrowserView.dataSource = self

        view.topAnchor.constraint(equalTo: controller.view.topAnchor).isActive = true
        view.bottomAnchor.constraint(equalTo: controller.view.bottomAnchor).isActive = true
        view.leftAnchor.constraint(equalTo: controller.view.leftAnchor).isActive = true
        view.rightAnchor.constraint(equalTo: controller.view.rightAnchor).isActive = true
    }

    // MARK: - MSStickerBrowserViewDataSource

    @objc(numberOfStickersInStickerBrowserView:) func numberOfStickers(in stickerBrowserView: MSStickerBrowserView) -> Int {
        return stickers.count
    }

    @objc(stickerBrowserView:stickerAtIndex:) func stickerBrowserView(_ stickerBrowserView: MSStickerBrowserView, stickerAt index: Int) -> MSSticker {
        return stickers[index]
    }

    // MARK: - Conversation Handling

    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.

        // Use this method to configure the extension and restore previously stored state.
        print("----- willBecomeActive");
    }

    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.

        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        print("----- didResignActive");
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.

        // Use this method to trigger UI updates in response to the message.
    }

    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }

    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.

        // Use this to clean up state related to the deleted message.
    }

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.

        // Use this method to prepare for the change in presentation style.
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.

        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    
}
